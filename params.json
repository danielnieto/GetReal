{
  "name": "Scrapman",
  "tagline": "Retrieve real (with Javascript executed) HTML code from an URL, ultra fast and supports multiple parallel loading of webs",
  "body": "# Scrapman\r\n\r\n>*Ski-bi dibby dib yo da dub dub*<br>\r\n*Yo da dub dub*<br>\r\n*Ski-bi dibby dib yo da dub dub*<br>\r\n*Yo da dub dub*<br><br>\r\n***I'm the Scrapman!***\r\n\r\n###THE FASTEST SCRAPPER EVER\\*... AND IT SUPPORTS PARALLEL REQUESTS <small>(\\*arguably)</small>\r\n\r\nScrapman is a blazingly fast **real (with Javascript executed)** HTML scrapper, built from the ground up to support parallel fetches, with this you can get the HTML code for 50+ URLs in seconds (~30 seconds).\r\n\r\nOn NodeJS you can easily use `request` to fetch the HTML from a page, but what if the page you are trying to load is *NOT* a static HTML page, but it has dynamic content added with Javascript? What do you do then? Well, you use ***The Scrapman***.\r\n\r\nIt uses [Electron](http://electron.atom.io) to dynamically load web pages into several `<webview>` within a single Chromium instance. This is why it fetches the HTML exactly as you would see it if you inspect the page with DevTools.\r\n\r\nThis is **NOT** an browser automation tool (yet), it's a node module that gives you the processed HTML from an URL, it focuses on multiple parallel operations and speed.\r\n\r\n##USAGE\r\n\r\n1.- Install it\r\n\r\n`npm install scrapman -S`\r\n\r\n2.- Require it\r\n\r\n`var scrapman = require(\"scrapman\");`\r\n\r\n3.- Use it (as many times as you need)\r\n\r\nSingle URL request\r\n\r\n```javascript\r\nscrapman.load(\"http://google.com\", function(results){\r\n\t//results contains the HTML obtained from the url\r\n\tconsole.log(results);\r\n});\r\n```\r\nParallel URL requests\r\n\r\n```javascript\r\n//yes, you can use it within a loop.\r\nfor(var i=1; i<=50; i++){\r\n    scrapman.load(\"https://www.website.com/page/\" + i, function(results){\r\n        console.log(results);\r\n    });\r\n}\r\n```\r\n\r\n##API\r\n\r\n###- scrapman.load(url, callback)\r\n\r\n####url\r\nType: `String`<br>\r\n\r\nThe URL from which the HTML code is going to be obtained.\r\n\r\n####callback(results)\r\nType: `Function`<br>\r\n\r\nThe callback function to be executed when the loading is done. The loaded HTML will be in the `results` parameter.\r\n\r\n###- scrapman.configure(config)\r\n\r\n####config\r\nThe configuration object can set the following values\r\n\r\n* `maxConcurrentOperations`: Integer - The intensity of processing, how many URLs can be loaded at the same time, default: 50\r\n\r\n\r\n## Questions\r\nFeel free to open Issues to ask questions about using this package, PRs are very welcomed and encouraged.\r\n\r\n**SE HABLA ESPAÑOL**\r\n\r\n## License\r\n\r\nMIT © Daniel Nieto\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}